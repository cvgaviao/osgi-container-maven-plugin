/**
 * ==========================================================================
 * Copyright © 2015-2019 Cristiano Gavião, C8 Technology ME.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Cristiano Gavião (cvgaviao@c8tech.com.br)- initial API and implementation
 * ==========================================================================
 */
package br.com.c8tech.tools.maven.plugin.osgi.container.it;

import java.io.File;

import org.junit.Test;
import org.junit.runner.RunWith;

import io.takari.maven.testing.executor.MavenExecutionResult;
import io.takari.maven.testing.executor.MavenRuntime.MavenRuntimeBuilder;
import io.takari.maven.testing.executor.MavenVersions;
import io.takari.maven.testing.executor.junit.MavenJUnitTestRunner;

@RunWith(MavenJUnitTestRunner.class)
@MavenVersions({ "3.6.0" })
public class EquinoxContainerArchiveGenerationIntegrationTest
        extends AbstractIntegrationTest {
    public EquinoxContainerArchiveGenerationIntegrationTest(
            MavenRuntimeBuilder builder) throws Exception {
        super(builder);
    }

    /**
     * Ensure that a container distribution archive is being generated using the
     * plugin internal default configuration.
     * 
     * @throws Exception
     */
    @Test
    public void testGenerateContainerArchiveDefault() throws Exception {
        File basedir = resources
                .getBasedir("it-project--equinox-archive-gen-default");

        MavenExecutionResult result = mavenRuntime.forProject(basedir)
                .execute("clean", "package");

        result.assertErrorFreeLog();
        // result.assertLogText(
        // "Loading properties from maven artifacts for project");
        // result.assertLogText(
        // "Nothing to do since any artifact was set to be downloaded");
        // result.assertLogText(
        // "Setting up caching of maven artifacts for project
        // osgi-repository.it.test");
        // result.assertLogText(
        // "Preparing for caching artifacts from maven repositories");
        // result.assertLogText(
        // "Finished copying of 1 artifact from maven repositories.");
    }

 

    /**
     * Ensure that a container distribution archive is being generated and using
     * a custom OSGi R5 bundles repository.
     * 
     * @throws Exception
     */
    
    // TODO I don't know how to provide a repository externally yet
    // or produce one for a test.
   // @Test
    public void testGenerateContainerArchiveWithCustomEmbedBundlesRepository()
            throws Exception {
        File basedir = resources.getBasedir(
                "it-project--equinox-with-embed-repository");

        MavenExecutionResult result = mavenRuntime.forProject(basedir)
                .execute("clean", "package");

        result.assertErrorFreeLog();
    }

    /**
     * Ensure that a container distribution archive is being generated and the
     * configuration file are being generated based on the declared
     * dependencies.
     * 
     * @throws Exception
     */
    @Test
    public void testGenerateContainerArchiveWithAutoGeneratedConfigfile()
            throws Exception {
        File basedir = resources.getBasedir(
                "it-project--equinox-archive-gen-configfile-autogen");

        MavenExecutionResult result = mavenRuntime.forProject(basedir)
                .execute("clean", "package");

        result.assertErrorFreeLog();
    }

}
